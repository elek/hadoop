/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/toLICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
node("ec2-m4-xlarge-docker") {
    docker.image('elek/ozone-build').pull()
    docker.image('elek/ozone-build').inside("--privileged") {


        stage('Checkout') {
            checkout scm
            //checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: env.branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-token', url: "https://github.com/${organization}/${repository}.git"]]]
            sh "rm -rf ./build && mkdir -p ./build"
        }
        stage('Clean') {
            status = sh script: 'mvn clean -B -f pom.ozone.xml'
        }

        stage('Build') {
            sh script: 'mvn install -B -f pom.ozone.xml -DskipTests -Pk8s-dev,k8s-dev-push -Ddocker.image=docker-registry.infra.cloudera.com/kubecat-dev/ozone:nightly'
        }

    }

}

def sendMail(results) {

    message = "\n"
    message += "The following tests are FAILED:\n\n"
    results.each { name, result ->
        if (result.failed) {
            message += "[$name]: $result.message ($result.url)\n\n"
        }
    }
    message += "\n"
    message += "The following tests are PASSED:\n\n"
    results.each { name, result ->
        if (!result.failed) {
            message += "[$name]: $result.message ($result.url)\n\n"
        }
    }
    message += "NOTE: this is an experimental build by Marton Elek, after the " +
            "stabilization it can be moved to the builds.apache.org. Ping me with " +
            "any questions/comments."
    echo message
   // emailext body: message, to: 'ozone-dev@cloudera.com', subject: '[$PROJECT_NAME] - Build # $BUILD_NUMBER - $BUILD_STATUS!'

}

def githubStatus(name, status, description, url = '') {
    commitId = sh(returnStdout: true, script: 'git rev-parse HEAD')
    context = 'ci/ozone/' + name
    // githubNotify account: 'apache', context: context, credentialsId: 'github-pr-elek', description: description, repo: 'hadoop', sha: commitId, status: status, targetUrl: url
}


def createResult(name, responseCode, url = '') {
    status = "ERROR"
    desc = "failed"
    if (responseCode == 0) {
        status = "SUCCESS"
        desc = "passed"
    }
    message = name + " check is " + desc
    if (!url) {
        url = "/artifact/build/" + name + ".out/*view*/"
    }
    url = env.BUILD_URL + url
    result = ["message": message, "failed": (responseCode != 0), "name": name, "url": url, "status": status]
    return result
}
